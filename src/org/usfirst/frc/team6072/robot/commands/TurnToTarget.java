// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team6072.robot.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc.team6072.robot.Robot;
import org.usfirst.frc.team6072.robot.RobotMap;
import org.usfirst.frc.team6072.PID.DistancePID;
import org.usfirst.frc.team6072.PID.HeadingPID;

import com.kauailabs.navx.frc.AHRS;

/**
 *
 */
public class TurnToTarget extends Command {
	
	private final HeadingPID headingPID = RobotMap.headingPID;
	private final AHRS ahrs = RobotMap.ahrs;
	private int turnAngle;
	private boolean finished = false;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public TurnToTarget() {
    	requires(Robot.drivetrain);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	turnAngle = (int) -RobotMap.visionTable.getNumber("horizontal_angle",0);
    	headingPID.ResetPID();
    	headingPID.setAbsoluteTolerance(2); 
    	//how many degrees off the headingPID can be - prevents oscillation from the 
    	//robot continuously overshooting and then trying to correct itself
    	headingPID.enable();
    	ahrs.reset();  //reset the navX
    	finished = true;
    	
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	headingPID.setSetpoint(turnAngle); //the number of degrees you want the headingPID to move
    	Robot.drivetrain.turn(headingPID.getOutput()); 
    	
    	//moves forward during turn
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	SmartDashboard.putBoolean("OnTarget", headingPID.onTarget());
        return headingPID.onTarget()||finished;
    }

    // Called once after isFinished returns true
    protected void end() {
     
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}